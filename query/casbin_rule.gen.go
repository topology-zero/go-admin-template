// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"admin_template/model"
)

func newCasbinRuleModel(db *gorm.DB, opts ...gen.DOOption) casbinRuleModel {
	_casbinRuleModel := casbinRuleModel{}

	_casbinRuleModel.casbinRuleModelDo.UseDB(db, opts...)
	_casbinRuleModel.casbinRuleModelDo.UseModel(&model.CasbinRuleModel{})

	tableName := _casbinRuleModel.casbinRuleModelDo.TableName()
	_casbinRuleModel.ALL = field.NewAsterisk(tableName)
	_casbinRuleModel.ID = field.NewInt64(tableName, "id")
	_casbinRuleModel.Ptype = field.NewString(tableName, "ptype")
	_casbinRuleModel.V0 = field.NewString(tableName, "v0")
	_casbinRuleModel.V1 = field.NewString(tableName, "v1")
	_casbinRuleModel.V2 = field.NewString(tableName, "v2")
	_casbinRuleModel.V3 = field.NewString(tableName, "v3")
	_casbinRuleModel.V4 = field.NewString(tableName, "v4")
	_casbinRuleModel.V5 = field.NewString(tableName, "v5")
	_casbinRuleModel.V6 = field.NewString(tableName, "v6")
	_casbinRuleModel.V7 = field.NewString(tableName, "v7")

	_casbinRuleModel.fillFieldMap()

	return _casbinRuleModel
}

type casbinRuleModel struct {
	casbinRuleModelDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String
	V6    field.String
	V7    field.String

	fieldMap map[string]field.Expr
}

func (c casbinRuleModel) Table(newTableName string) *casbinRuleModel {
	c.casbinRuleModelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c casbinRuleModel) As(alias string) *casbinRuleModel {
	c.casbinRuleModelDo.DO = *(c.casbinRuleModelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *casbinRuleModel) updateTableName(table string) *casbinRuleModel {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Ptype = field.NewString(table, "ptype")
	c.V0 = field.NewString(table, "v0")
	c.V1 = field.NewString(table, "v1")
	c.V2 = field.NewString(table, "v2")
	c.V3 = field.NewString(table, "v3")
	c.V4 = field.NewString(table, "v4")
	c.V5 = field.NewString(table, "v5")
	c.V6 = field.NewString(table, "v6")
	c.V7 = field.NewString(table, "v7")

	c.fillFieldMap()

	return c
}

func (c *casbinRuleModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *casbinRuleModel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["ptype"] = c.Ptype
	c.fieldMap["v0"] = c.V0
	c.fieldMap["v1"] = c.V1
	c.fieldMap["v2"] = c.V2
	c.fieldMap["v3"] = c.V3
	c.fieldMap["v4"] = c.V4
	c.fieldMap["v5"] = c.V5
	c.fieldMap["v6"] = c.V6
	c.fieldMap["v7"] = c.V7
}

func (c casbinRuleModel) clone(db *gorm.DB) casbinRuleModel {
	c.casbinRuleModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c casbinRuleModel) replaceDB(db *gorm.DB) casbinRuleModel {
	c.casbinRuleModelDo.ReplaceDB(db)
	return c
}

type casbinRuleModelDo struct{ gen.DO }

type ICasbinRuleModelDo interface {
	gen.SubQuery
	Debug() ICasbinRuleModelDo
	WithContext(ctx context.Context) ICasbinRuleModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICasbinRuleModelDo
	WriteDB() ICasbinRuleModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICasbinRuleModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICasbinRuleModelDo
	Not(conds ...gen.Condition) ICasbinRuleModelDo
	Or(conds ...gen.Condition) ICasbinRuleModelDo
	Select(conds ...field.Expr) ICasbinRuleModelDo
	Where(conds ...gen.Condition) ICasbinRuleModelDo
	Order(conds ...field.Expr) ICasbinRuleModelDo
	Distinct(cols ...field.Expr) ICasbinRuleModelDo
	Omit(cols ...field.Expr) ICasbinRuleModelDo
	Join(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo
	Group(cols ...field.Expr) ICasbinRuleModelDo
	Having(conds ...gen.Condition) ICasbinRuleModelDo
	Limit(limit int) ICasbinRuleModelDo
	Offset(offset int) ICasbinRuleModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICasbinRuleModelDo
	Unscoped() ICasbinRuleModelDo
	Create(values ...*model.CasbinRuleModel) error
	CreateInBatches(values []*model.CasbinRuleModel, batchSize int) error
	Save(values ...*model.CasbinRuleModel) error
	First() (*model.CasbinRuleModel, error)
	Take() (*model.CasbinRuleModel, error)
	Last() (*model.CasbinRuleModel, error)
	Find() ([]*model.CasbinRuleModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CasbinRuleModel, err error)
	FindInBatches(result *[]*model.CasbinRuleModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CasbinRuleModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICasbinRuleModelDo
	Assign(attrs ...field.AssignExpr) ICasbinRuleModelDo
	Joins(fields ...field.RelationField) ICasbinRuleModelDo
	Preload(fields ...field.RelationField) ICasbinRuleModelDo
	FirstOrInit() (*model.CasbinRuleModel, error)
	FirstOrCreate() (*model.CasbinRuleModel, error)
	FindByPage(offset int, limit int) (result []*model.CasbinRuleModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICasbinRuleModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c casbinRuleModelDo) Debug() ICasbinRuleModelDo {
	return c.withDO(c.DO.Debug())
}

func (c casbinRuleModelDo) WithContext(ctx context.Context) ICasbinRuleModelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c casbinRuleModelDo) ReadDB() ICasbinRuleModelDo {
	return c.Clauses(dbresolver.Read)
}

func (c casbinRuleModelDo) WriteDB() ICasbinRuleModelDo {
	return c.Clauses(dbresolver.Write)
}

func (c casbinRuleModelDo) Session(config *gorm.Session) ICasbinRuleModelDo {
	return c.withDO(c.DO.Session(config))
}

func (c casbinRuleModelDo) Clauses(conds ...clause.Expression) ICasbinRuleModelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c casbinRuleModelDo) Returning(value interface{}, columns ...string) ICasbinRuleModelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c casbinRuleModelDo) Not(conds ...gen.Condition) ICasbinRuleModelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c casbinRuleModelDo) Or(conds ...gen.Condition) ICasbinRuleModelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c casbinRuleModelDo) Select(conds ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c casbinRuleModelDo) Where(conds ...gen.Condition) ICasbinRuleModelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c casbinRuleModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICasbinRuleModelDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c casbinRuleModelDo) Order(conds ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c casbinRuleModelDo) Distinct(cols ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c casbinRuleModelDo) Omit(cols ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c casbinRuleModelDo) Join(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c casbinRuleModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c casbinRuleModelDo) RightJoin(table schema.Tabler, on ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c casbinRuleModelDo) Group(cols ...field.Expr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c casbinRuleModelDo) Having(conds ...gen.Condition) ICasbinRuleModelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c casbinRuleModelDo) Limit(limit int) ICasbinRuleModelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c casbinRuleModelDo) Offset(offset int) ICasbinRuleModelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c casbinRuleModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICasbinRuleModelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c casbinRuleModelDo) Unscoped() ICasbinRuleModelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c casbinRuleModelDo) Create(values ...*model.CasbinRuleModel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c casbinRuleModelDo) CreateInBatches(values []*model.CasbinRuleModel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c casbinRuleModelDo) Save(values ...*model.CasbinRuleModel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c casbinRuleModelDo) First() (*model.CasbinRuleModel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasbinRuleModel), nil
	}
}

func (c casbinRuleModelDo) Take() (*model.CasbinRuleModel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasbinRuleModel), nil
	}
}

func (c casbinRuleModelDo) Last() (*model.CasbinRuleModel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasbinRuleModel), nil
	}
}

func (c casbinRuleModelDo) Find() ([]*model.CasbinRuleModel, error) {
	result, err := c.DO.Find()
	return result.([]*model.CasbinRuleModel), err
}

func (c casbinRuleModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CasbinRuleModel, err error) {
	buf := make([]*model.CasbinRuleModel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c casbinRuleModelDo) FindInBatches(result *[]*model.CasbinRuleModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c casbinRuleModelDo) Attrs(attrs ...field.AssignExpr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c casbinRuleModelDo) Assign(attrs ...field.AssignExpr) ICasbinRuleModelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c casbinRuleModelDo) Joins(fields ...field.RelationField) ICasbinRuleModelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c casbinRuleModelDo) Preload(fields ...field.RelationField) ICasbinRuleModelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c casbinRuleModelDo) FirstOrInit() (*model.CasbinRuleModel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasbinRuleModel), nil
	}
}

func (c casbinRuleModelDo) FirstOrCreate() (*model.CasbinRuleModel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CasbinRuleModel), nil
	}
}

func (c casbinRuleModelDo) FindByPage(offset int, limit int) (result []*model.CasbinRuleModel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c casbinRuleModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c casbinRuleModelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c casbinRuleModelDo) Delete(models ...*model.CasbinRuleModel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *casbinRuleModelDo) withDO(do gen.Dao) *casbinRuleModelDo {
	c.DO = *do.(*gen.DO)
	return c
}
